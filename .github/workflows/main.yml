on: push
jobs:
  build-x64:
    strategy:
      matrix:
        platform: [win32, darwin, linux]
        include:
          - platform: win32
            runner: windows-latest
          - platform: darwin
            runner: macos-latest
          - platform: linux
            runner: ubuntu-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      # If you change the build commands below, also change on package.json for people who are compiling locally.
      - run: CGO_ENABLED=0 go build -o node_modules/.bin/caxa-stub src/stub.go && echo CAXACAXACAXA >> node_modules/.bin/caxa-stub
        shell: bash
      - uses: actions/upload-artifact@v2
        with:
          name: stub--${{ matrix.platform }}--x64
          path: "node_modules/.bin/caxa-stub"

  build-darwin-arm:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: "^1.16"
      # If you change the build commands below, also change on package.json for people who are compiling locally.
      - run: CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o node_modules/.bin/caxa-stub src/stub.go && echo CAXACAXACAXA >> node_modules/.bin/caxa-stub
      - uses: actions/upload-artifact@v2
        with:
          name: stub--darwin--arm64
          path: "node_modules/.bin/caxa-stub"

  build-linux-arm:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [arm--6, arm--7, arm64]
        include:
          - architecture: arm--6
            docker-platform: linux/arm/v6
            docker-image: arm32v6/golang:1.16-alpine # There is only an alpine image for this architecture
          - architecture: arm--7
            docker-platform: linux/arm/v7
            docker-image: arm32v7/golang:1.16
          - architecture: arm64
            docker-platform: linux/arm64/v8
            docker-image: arm64v8/golang:1.16
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Enable Docker Experimental Features (Required to use `docker run --platform`)
        run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'
      - run: |
          docker run --rm --platform ${{ matrix.docker-platform }} -v $PWD:/caxa -w /caxa ${{ matrix.docker-image }} sh -c 'CGO_ENABLED=0 go build -o node_modules/.bin/caxa-stub src/stub.go && echo CAXACAXACAXA >> node_modules/.bin/caxa-stub'
      - uses: actions/upload-artifact@v2
        with:
          name: stub--linux--${{ matrix.architecture }}
          path: "node_modules/.bin/caxa-stub"

  test-x64:
    needs: build-x64
    strategy:
      matrix:
        platform: [win32, darwin, linux]
        include:
          - platform: win32
            runner: windows-latest
          - platform: darwin
            runner: macos-latest
          - platform: linux
            runner: ubuntu-latest
    runs-on: ${{ matrix.runner }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v2
        with:
          name: stub--${{ matrix.platform }}--x64
      - run: |
          npm ci
          mv caxa-stub node_modules/.bin/caxa-stub
          npm test

  test-linux-arm:
    needs: build-linux-arm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        architecture: [arm--6, arm--7, arm64]
        include:
          - architecture: arm--6
            docker-platform: linux/arm
            docker-image: arm32v6/node:16-alpine # There is only an alpine image
          - architecture: arm--7
            docker-platform: linux/arm
            docker-image: arm32v7/node:16
          - architecture: arm64
            docker-platform: linux/arm64
            docker-image: arm64v8/node:16
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-qemu-action@v1
        with:
          platforms: all
      - name: Enable Docker Experimental Features (Required to use `docker run --platform`)
        run: |
          echo $'{\n  "experimental": true\n}' | sudo tee /etc/docker/daemon.json
          mkdir -p ~/.docker
          echo $'{\n  "experimental": "enabled"\n}' | sudo tee ~/.docker/config.json
          sudo service docker restart
          docker version -f '{{.Client.Experimental}}'
          docker version -f '{{.Server.Experimental}}'
      - uses: actions/download-artifact@v2
        with:
          name: stub--linux--${{ matrix.architecture }}
      # - run: mv caxa-stub node_modules/.bin/caxa-stub
      - run: docker run --rm --platform ${{ matrix.docker-platform }} -v $PWD:/caxa -w /caxa ${{ matrix.docker-image }} sh -c 'npm ci && mv caxa-stub node_modules/.bin/caxa-stub && npm test'

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [test-x64, test-linux-arm, build-darwin-arm]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: stub--win32--x64
          path: stub--win32--x64
      - uses: actions/download-artifact@v2
        with:
          name: stub--darwin--x64
          path: stub--darwin--x64
      - uses: actions/download-artifact@v2
        with:
          name: stub--linux--x64
          path: stub--linux--x64
      - uses: actions/download-artifact@v2
        with:
          name: stub--darwin--arm64
          path: stub--darwin--arm64
      - uses: actions/download-artifact@v2
        with:
          name: stub--linux--arm--6
          path: stub--linux--arm--6
      - uses: actions/download-artifact@v2
        with:
          name: stub--linux--arm--7
          path: stub--linux--arm--7
      - uses: actions/download-artifact@v2
        with:
          name: stub--linux--arm64
          path: stub--linux--arm64
      - run: | # We should upload the checksums to their respective artifacts That would require hardcoded uploads like the downloads above.
          for artifact in *
          do
            (cd $artifact && shasum -a 256 caxa-stub > $artifact.txt && cat $artifact.txt) 
          done
      # - name: Upload artifacts # Upload checksums to artifact. Useful if not a tagged release
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: stubs
      #     path: "stubs/sha256sums.txt"

      - name: Release # We need to rename all the files before uploading this way. 
        uses: action/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            stubs/linux
            stubs/linux-arm64
            stubs/linux-armv6
            stubs/linux-armv7
            stubs/macos
            stubs/windows.exe
            stubs/sha256sums.txt
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Create Release
      #   if: startsWith( github.ref, 'refs/tags/' ) # Run on tags only.
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     release_name: Release ${{ github.ref }}
      #     draft: true

      # - name: Upload Windows Stub
      #   if: startsWith( github.ref, 'refs/tags/' ) # Run on tags only.
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: ./stub--win32--x64/caxa-stub
      #     asset_name: <new stub name>

  npm-publish: # Needs to download the checksums
    if: startsWith(github.ref, 'refs/tags/v')
    needs: release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - run: npm ci && npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
